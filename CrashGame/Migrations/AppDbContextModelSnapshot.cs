// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TestApp.Models;

namespace TestApp.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.3")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("TestApp.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "ad67fe40-2869-43f2-9938-555ef3e07b55",
                            AccessFailedCount = 0,
                            Balance = 100000m,
                            ConcurrencyStamp = "065bc8a3-cde5-4ccc-903b-56ca9783e49d",
                            Email = "test0@test.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "TEST0@TEST.COM",
                            NormalizedUserName = "TEST0@TEST.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEE+sQ02mJK58lOB4BLaC1kNipex6OsiTCtSvYdfDRAIB4Zy96lAJCcqIGLr/lBaPAQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d6f71421-dfbd-4b0a-a6e1-ff7cca97087b",
                            TwoFactorEnabled = false,
                            UserName = "test0@test.com"
                        },
                        new
                        {
                            Id = "e878ea29-c524-4c21-9864-300e29d2d870",
                            AccessFailedCount = 0,
                            Balance = 100000m,
                            ConcurrencyStamp = "b6b80e18-36df-40f7-9ccf-a0e9d4b4ffeb",
                            Email = "test1@test.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "TEST1@TEST.COM",
                            NormalizedUserName = "TEST1@TEST.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJK05RYnQlGh1xt9nEuEp1DaKOzuQrOwriX9cnXIAHo1ff6AWTtiI4yfZT2h+8OSWQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "90233417-f23e-4ac7-a8bc-db7d172bd5a7",
                            TwoFactorEnabled = false,
                            UserName = "test1@test.com"
                        },
                        new
                        {
                            Id = "f86ec3b4-db3c-4433-a2a2-5c66b7c4c3fb",
                            AccessFailedCount = 0,
                            Balance = 100000m,
                            ConcurrencyStamp = "d94df586-1c8e-421d-9f51-26ec103201a5",
                            Email = "test2@test.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "TEST2@TEST.COM",
                            NormalizedUserName = "TEST2@TEST.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAECCZHkCY4Oh14uojeGnQVg7EELCrF76uQIoPbVgPXaAC5cVvwyVduaL8OVUCNe8nnQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fd7940dd-c3ef-4ac5-aa29-34e42865825d",
                            TwoFactorEnabled = false,
                            UserName = "test2@test.com"
                        },
                        new
                        {
                            Id = "3055f3f4-1e32-44ed-a48d-b40b14412f1f",
                            AccessFailedCount = 0,
                            Balance = 100000m,
                            ConcurrencyStamp = "c14fba0b-fc70-4cee-aa6d-ab3624ecbd38",
                            Email = "test3@test.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "TEST3@TEST.COM",
                            NormalizedUserName = "TEST3@TEST.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEHXoCVcQSFud8knlvplkCLYxJszCJ/vkW6Qepj/y+aOpdtvXzLs+AOGhB6aTOLyJJw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "124b99b8-64f7-4531-baac-814f3a0ff9ac",
                            TwoFactorEnabled = false,
                            UserName = "test3@test.com"
                        },
                        new
                        {
                            Id = "36b4d092-9cb8-4d77-b310-a98216130831",
                            AccessFailedCount = 0,
                            Balance = 100000m,
                            ConcurrencyStamp = "f272d48f-7038-4d9d-8a73-02bced3da5be",
                            Email = "test4@test.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "TEST4@TEST.COM",
                            NormalizedUserName = "TEST4@TEST.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEBJMQV79h5qNR1EvseOs5X/kU319tGVt54pHm83WUmn5l6ndOsg1eNJgraEMAknSBQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4f9a156e-ef09-404f-a820-d9a6a719c0fd",
                            TwoFactorEnabled = false,
                            UserName = "test4@test.com"
                        });
                });

            modelBuilder.Entity("TestApp.Models.CrashBet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(16,8)");

                    b.Property<int?>("CrashGameId")
                        .HasColumnType("int");

                    b.Property<int?>("CrashGameResultId")
                        .HasColumnType("int");

                    b.Property<int?>("CrashGameResultId1")
                        .HasColumnType("int");

                    b.Property<string>("OwnerId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CrashGameId");

                    b.HasIndex("CrashGameResultId");

                    b.HasIndex("CrashGameResultId1");

                    b.ToTable("CrashBet");
                });

            modelBuilder.Entity("TestApp.Models.CrashGame", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CompleteAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("GameNumber")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Multiplier")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("CrashGames");
                });

            modelBuilder.Entity("TestApp.Models.CrashGameResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CompleteAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("GameNumber")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Multiplier")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("CrashGameResults");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TestApp.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TestApp.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestApp.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TestApp.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TestApp.Models.CrashBet", b =>
                {
                    b.HasOne("TestApp.Models.CrashGame", null)
                        .WithMany("Bets")
                        .HasForeignKey("CrashGameId");

                    b.HasOne("TestApp.Models.CrashGameResult", null)
                        .WithMany("LoseBets")
                        .HasForeignKey("CrashGameResultId");

                    b.HasOne("TestApp.Models.CrashGameResult", null)
                        .WithMany("WinBets")
                        .HasForeignKey("CrashGameResultId1");
                });

            modelBuilder.Entity("TestApp.Models.CrashGame", b =>
                {
                    b.Navigation("Bets");
                });

            modelBuilder.Entity("TestApp.Models.CrashGameResult", b =>
                {
                    b.Navigation("LoseBets");

                    b.Navigation("WinBets");
                });
#pragma warning restore 612, 618
        }
    }
}
